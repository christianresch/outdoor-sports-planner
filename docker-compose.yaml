services:
  # --------------------------------------------------------
  # Rabbit MQ
  # --------------------------------------------------------
  rabbitmq:
    image: "rabbitmq:4.0.6-management"
    container_name: rabbitmq
    environment:
      - RABBITMQ_LOGS=console
      - RABBITMQ_LOG_LEVEL=warning
    ports:
      - "5672:5672"  # RabbitMQ message broker
      - "15672:15672"  # RabbitMQ management UI
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  # --------------------------------------------------------
  # Web Server
  # --------------------------------------------------------
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: web_container
    environment:
      DATA_ANALYZER_URL: "http://analyzer:8001/analyze"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq/"
      USE_RABBITMQ: "true"
      ANALYZER_QUEUE_NAME: "data_analyzer_queue"
    depends_on:
      analyzer:
        condition: service_started # ensures analyzer is up before web tries to call it
      rabbitmq:
        condition: service_healthy
    ports:
      - "8000:8000"

  # --------------------------------------------------------
  # Data Analyzer
  # --------------------------------------------------------
  analyzer:
    build:
      context: .
      dockerfile: Dockerfile.analyzer
    container_name: analyzer_container
    environment:
      WEATHER_API_URL: "http://weather:8002/collect"
      AIR_QUALITY_API_URL: "http://aqi:8003/collect"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq/"
      ANALYZER_QUEUE_NAME: "data_analyzer_queue"
    depends_on:
      weather:
        condition: service_started
      aqi:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    ports:
      - "8001:8001"

  # --------------------------------------------------------
  # Weather Collector
  # --------------------------------------------------------
  weather:
    build:
      context: .
      dockerfile: Dockerfile.weather
    container_name: weather_container
    environment:
      AQICN_TOKEN: ${AQICN_TOKEN}
      SQLITE_WEATHER_DB_PATH: "sqlite:////app/data/weather.db"
    # Volume for storing the SQLite file, so data isn't lost on container rebuild
    volumes:
      - db_data:/app/data
    ports:
      - "8002:8002"

  # --------------------------------------------------------
  # AQI Collector
  # --------------------------------------------------------
  aqi:
    build:
      context: .
      dockerfile: Dockerfile.aqi
    container_name: aqi_container
    environment:
      SQLITE_AQI_DB_PATH: "sqlite:////app/data/aqi.db"
    volumes:
      - db_data:/app/data
    ports:
      - "8003:8003"

volumes:
  db_data:
